#!/bin/sh

progname=$(basename $0)
progversion="1.0.1"

# usage function
function usage()
{
   cat << HEREDOC

   Usage: $progname [-c|--config-file CONFIG_FILE] [-a|--attachments-only] [-p|--pages-only] [-d|--debug]

   optional arguments:
     -h, --help                           Show this help message and exit.
     -c, --config-file CONFIG_FILE        Load CONFIG_FILE configuration.
     -a, --attachments-only               Sync attachments only.
     -p, --pages-only                     Sync remotepages only.
     -d, --debug                          Print debug information.
     -v, --version                        Print version information.

HEREDOC
}

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    --attachs-only|--attachments-only)
    DWATTACHSONLY=true
    shift # past argument
    ;;
    -c|--config-file)
    DWCONFIG="$2"
    shift # past argument
    shift # past value
    ;;
    -d|--debug)
    DWDEBUG=true
    shift # past argument
    ;;
    --pages-only)
    DWPAGESONLY=true
    shift # past argument
    ;;
    -h | --help)
    usage
    exit
    shift # past argument
    ;;
    -v | --version)
    echo $progname $progversion
    exit
    shift # past argument
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    echo "Invalid parameter ($1). Exiting."
    exit 1
    shift # past argument
    ;;
esac
done

OPTS=$(getopt -o "hcapd" --long "help,config-file,attachments-only,pages-only,debug" -n "$progname" -- "$@")
if [ $? != 0 ] ; then echo "Error in command line arguments." >&2 ; exit 1 ; fi
eval set -- "$OPTS"

while true; do
  case "$1" in
    -h | --help ) usage; exit; ;;
    -c | --config-file ) DWCONFIG="$2"; shift 2 ;;
    -a | --attachments-only ) DWATTACHSONLY=true; shift ;;
    -p | --pages-only ) DWPAGESONLY=true; shift ;;
    -d | --debug ) DWDEBUG=true; shift ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

# 1. Create ProgressBar function
# 1.1 Input is currentState($1) and totalState($2)
function ProgressBar {
# Process data
    let _progress=(${1}*100/${2}*100)/100
    let _done=(${_progress}*4)/10
    let _left=40-$_done
# Build progressbar string lengths
    _fill=$(printf "%${_done}s")
    _empty=$(printf "%${_left}s")

# 1.2 Build progressbar strings and print the ProgressBar line
# 1.2.1 Output example:
# 1.2.1.1 Progress : [########################################] 100%
printf "\rProgress (${1} of ${2}) : [${_fill// /#}${_empty// /-}] ${_progress}%%"

}

getInfo() {
	if [ "$2" == "page" ]; then
		localDBInfo="$DWCONFIGDIRNAME/.dokuwiki-sync/pages.db"
		localwikifile="$localwikidatadir/$(echo $1 | tr ':' '/').txt"
		echo
		echo "getPageInfo $1"
		remotewikigetInfo=$($dokujclient getPageInfo $1 | sed -e 's/[[:space:]]*$//')

	elif [ "$2" == "attachment" ]; then
		localDBInfo="$DWCONFIGDIRNAME/.dokuwiki-sync/attachments.db"
		localwikifile="$localwikimediadir/$(echo $1 | tr ':' '/')"
		echo
		echo "getAttachmentInfo $1"
		remotewikigetInfo=$($dokujclient getAttachmentInfo $1)
	fi

	echo "Remote: $remotewikigetInfo"
	if [ ! -f $localDBInfo ]; then
		mkdir -p "`dirname \"$localDBInfo\"`" 2>/dev/null
		touch $localDBInfo
	fi

	# Print $localDBInfo file filtering it to not shown $remotewikigetInfo output line
	# If the grep command outputs the page or attachment info, then it doesn't match remote info and should be downloaded

	remotewikigetFile=1
	while IFS= read -r line
	do
		# echo "if \"$line \" -eq \"$remotewikigetInfo\""
		if [[ "$line" == "$remotewikigetInfo" ]]; then
			echo "Local:  $line"
			remotewikigetFile=0
			break
		elif [[ "$line" == "$(echo $remotewikigetInfo | cut -f1 -d" ")" ]]; then
			echo "Local:  $line"
			break
		fi
	done < "$localDBInfo"

	if [ $remotewikigetFile == 1 ]; then
		echo "Local: "

		if [ -f $localwikifile ]; then
			datef1=$(stat -c %y "$localwikifile")
		fi

		mkdir -p "`dirname \"$localwikifile\"`" 2>/dev/null

		if [ "$2" == "page" ]; then
			echo "getPage $1 > $localwikifile"
			$dokujclient getPage $1 > $localwikifile

		elif [ "$2" == "attachment" ]; then
			echo "getAttachment $1 $localwikifile"
			$dokujclient getAttachment $1 $localwikifile

		fi

		chown $localwikichown:$localwikichgrp $localwikifile

		if [ -f $localwikifile ]; then
			datep2=$(stat -c %y "$localwikifile")

			if [[ $datef2 != $datef1 ]]; then
				# Remove outdated file from localDBInfo, if exists
				printf "%s\n" "g/$(echo $remotewikigetInfo | cut -f1 -d" ")/d" w | ed -s $localDBInfo

				# Append downloaded file to localDBInfo
				echo $remotewikigetInfo >> $localDBInfo
				sort $localDBInfo > $localDBInfo.sort
				mv $localDBInfo.sort $localDBInfo
			fi
		fi

		# return 1
	fi

	# return 0
}

getAttachsSumAsync() {
	local count=1
	local total=$(printf "%s\n" "$remotewikiAttachments" | wc -l)
	for i in $remotewikiAttachments; do
		# echo
		if [ "$DWDEBUG" = true ]; then echo "[getAttachsSumAsync - $count of $total] getAttachments $i"; fi
		local remotewikigetAttachments=$($dokujclient getAttachments $i)
		if [ "$DWDEBUG" = true ]; then echo "[getAttachsSumAsync] $remotewikigetAttachments" | nl; fi

		if [ -v remotewikigetAttachments ] && [ ! -z "${remotewikigetAttachments}" ]; then
			sum=$(($(printf "%s\n" "$remotewikigetAttachments" | wc -l) + sum))
		fi
		# echo "[getAttachsSumAsync] Sum: $sum"
		echo $sum
		count=$((count+1))
	done
}

#localwikidir="/var/www/clients/client0/web3/web"
#localwikisavedir="$localwikidir/data"
#localwikidatadir="$localwikisavedir/pages"
#localwikimediadir="$localwikisavedir/media"
#localwikichown="5006"
#localwikichgrp="5005"

if ( [ -z "${DWCONFIG}" ] ); then
	if [ -f "$HOME/.dokuwiki-syncrc" ]; then
		DWCONFIG="$HOME/.dokuwiki-syncrc"
	elif [ -f "$HOME/private/.dokuwiki-syncrc" ]; then #ISPConfig
		DWCONFIG="$HOME/private/.dokuwiki-syncrc"
	elif [ -f "$HOME/etc/.dokuwiki-syncrc" ]; then #cPanel
		DWCONFIG="$HOME/etc/.dokuwiki-syncrc"
	elif [ -f "$(pwd)/.dokuwiki-syncrc" ]; then
		DWCONFIG="$(pwd)/.dokujclientrc"
	fi
fi
if [ "$DWDEBUG" = true ]; then echo "DWCONFIG=$DWCONFIG"; fi

if ( [ ! -z "${DWCONFIG}" ] && [ -f $DWCONFIG ] ); then
	source "$DWCONFIG"
	DWCONFIGDIRNAME="`dirname \"$DWCONFIG\"`"
else
	if [ "$DWDEBUG" = true ]; then echo "if [ -d $HOME/private ]; then"; fi
	if [ -d "$HOME/private" ]; then #ISPConfig
		DWCONFIGDIRNAME="$HOME/private"
	fi

	if [ -z ${DWCONFIGDIRNAME} ]; then
 		if [ "$DWDEBUG" = true ]; then echo "if [ -d $HOME/etc ]; then"; fi
		if [ -d "$HOME/etc" ]; then #cPanel
			DWCONFIGDIRNAME="$HOME/etc"
		fi
	fi

	if [ -z ${DWCONFIGDIRNAME} ]; then
 		if [ "$DWDEBUG" = true ]; then echo "if [ -d $HOME ]; then"; fi
		if [ -d "$HOME" ]; then
			DWCONFIGDIRNAME="$HOME"
		fi
	fi
fi
if [ "$DWDEBUG" = true ]; then echo "DWCONFIGDIRNAME=$DWCONFIGDIRNAME"; fi
if [ -d "$DWCONFIGDIRNAME" ]; then
	if [ ! -w "$DWCONFIGDIRNAME" ]; then
		echo "dokuwiki-sync '$DWCONFIGDIRNAME' directory is NOT WRITABLE. Exiting."
		exit 2
	fi
fi

if [ -z "${localwikidir}" ]; then
	# ISPConfig
	if [ -f "$HOME/web/doku.php" ]; then
		localwikidir="$HOME/web";
	# Apache
	elif [ -f "/var/www/html/doku.php" ]; then
		localwikidir="/var/www/html";
	elif [ -f "/var/www/html/dokuwiki/doku.php" ]; then
		localwikidir="/var/www/html/dokuwiki"
	elif [ -f "/var/wwww/html/wiki/doku.php" ]; then
		localwikidir="/var/www/html/wiki"
	# cPanel
	elif [ -f "$HOME/public_html/dokuwiki/doku.php" ]; then
		localwikidir="$HOME/public_html/dokuwiki/doku.php"
	elif [ -f "$HOME/public_html/wiki/doku.php" ]; then
		localwikidir="$HOME/public_html/wiki/doku.php"
	else
		echo "dokuwiki-sync 'localwikidir' parameter is not set. Exiting."
		exit 3
	fi
fi
if [ "$DWDEBUG" = true ]; then echo "localwikidir=$localwikidir"; fi

if [ -z "${localwikisavedir}" ]; then
	localwikisavedir="$localwikidir/data";
fi
if [ "$DWDEBUG" = true ]; then echo "localwikisavedir=$localwikisavedir"; fi

if [ -z "${localwikidatadir}" ]; then
	localwikidatadir="$localwikisavedir/pages"
fi
if [ "$DWDEBUG" = true ]; then echo "localwikidatadir=$localwikidatadir"; fi

if [ -z "${localwikimediadir}" ]; then
	localwikimediadir="$localwikisavedir/media"
fi
if [ "$DWDEBUG" = true ]; then echo "localwikimediadir=$localwikimediadir"; fi

#if [ -z "${localwikichown}" ]; then
#	localwikichown=$(id -u $USERNAME)
#fi

#if [ -z "${localwikichgrp}" ]; then
#	localwikichgrp=$(id -g $USERNAME)
#fi

if ( [ -z "${localwikichown}" ] && [ -z "${localwikichgrp}" ] ); then
	localwikichown=$(stat -c '%U' "$localwikisavedir/meta")
	localwikichgrp=$(stat -c '%G' "$localwikisavedir/meta")
fi
if [ "$DWDEBUG" = true ]; then
	echo "localwikichown=$localwikichown"
	echo "localwikichgrp=$localwikichgrp"
fi

if [ ! -f "$HOME/.dokujclientrc" ]; then
	if [ ! -f "$DWCONFIGDIRNAME/.dokujclientrc" ]; then
		if [ ! -f "$HOME/private/.dokujclientrc" ]; then # ISPConfig
			if [ ! -f "$HOME/etc/.dokujclientrc" ]; then #cPanel
				if [ ! -f "$(pwd)/.dokujclientrc" ]; then
					if ([[ ! -v $url ]]); then
						echo "dokujclient '--url' parameter is not set. Exiting."
						exit 4
					elif ([[ ! -v $url ]]); then
						echo "dokujclient '--user' parameter is not set. Exiting."
						exit 5
					elif ([[ ! -v $password ]]); then
						echo "dokujclient '--password' parameter is not set. Exiting."
						exit 6
					fi
				else
					source "($pwd)/.dokujclientrc"
				fi
			else
				source "$HOME/etc/.dokujclientrc"
			fi
		else
			source "$HOME/private/.dokujclientrc"
		fi
	else
		source "$DWCONFIGDIRNAME/.dokujclientrc"
	fi
else
	source "$HOME/.dokujclientrc"
fi
if [ "$DWDEBUG" = true ]; then
	echo "url=$url"
	echo "user=$user"
	echo "password=$password"
fi

export PATH="$PATH:/usr/local/bin"
dokujclient="dokujclient --user $user --password $password --url $url"

echo "getPageList ."
remotewikigetPagelist=$($dokujclient getPagelist .)
echo "$remotewikigetPagelist" | nl

if ( [ -z "${DWATTACHSONLY}" ] ) || ( [ -z "${DWATTACHSONLY}" ] && [ -z "${DWPAGESONLY}" ] ); then
	count=1
	for i in $remotewikigetPagelist; do
		echo
		ProgressBar "$count" $(printf "%s\n" "$remotewikigetPagelist" | wc -l)


		getInfo "$i" "page"
		count=$((count+1))
	done
fi

if ( [ -z "${DWPAGESONLY}" ] ) || ( [ -z "${DWATTACHSONLY}" ] && [ -z "${DWPAGESONLY}" ] ); then
	remotewikiAttachments=$(echo "$remotewikigetPagelist" | cut -f1 -d":" | sort | uniq)
	# echo "$remotewikiAttachments"
	# echo
	sum=0
	temp_sum=$(mktemp)
	count=1
	getAttachsSumAsync > $temp_sum &

	for i in $remotewikiAttachments; do
		echo
		echo "getAttachments $i"
		remotewikigetAttachments=$($dokujclient getAttachments $i)
		echo "$remotewikigetAttachments" | nl

		for j in $remotewikigetAttachments; do
			# sum=$(<$temp_sum)
			sum=$(awk '{ if ($1 ~ /^[0-9]+$/) lastnumber=$1 } END {print lastnumber}' $temp_sum)
			if [ "$DWDEBUG" = true ]; then echo "[remotewikigetAttachments] Sum: $sum"; fi
			if [[ $sum =~ ^-?[0-9]+$ ]]; then
				if [[ "$sum" -gt "0" ]] && [[ "$count" -le "$sum" ]]; then
					echo
					ProgressBar "$count" "$sum"
				fi
			fi
			getInfo "$j" "attachment"
			count=$((count + 1))
		done
	done
fi

php "$localwikidir/bin/indexer.php"

if ( [ ! -z "${localwikichown}" ] && [ ! -z "${localwikichgrp}" ] ); then
	chown -Rf $localwikichown:$localwikichgrp "$localwikisavedir/meta"
elif ( [ ! -z "${localwikichown}" ] ); then
	chown -Rf $localwikichown "$localwikisavedir/meta"
elif ( [ ! -z "${localwikichgrp}" ] ); then
	chgrp -Rf $localwikichgrp "$localwikisavedir/meta"
fi

rm -rf "$localwikisavedir/cache/*"
